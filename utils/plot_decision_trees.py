from deap import gp
import pygraphviz as pgv


def replace_labels(labels,old,new):
    indices = [i for i, value in enumerate(list(labels.values())) if value == old]
    for i in indices:
        labels[i]=new
    return labels

def plot_tree(expr, name: str = "tree"):
    """
    Visualizes a decision tree expression as a graph and saves it as an image.
    This function takes a decision tree expression, processes its nodes and edges,
    and generates a graphical representation of the tree using the PyGraphviz library.
    The resulting graph is saved as a PNG image.
    Args:
        expr: The decision tree expression to be visualized. This is typically
              generated by a genetic programming library.
        name (str): The name of the output image file (without extension). The
                    image will be saved in the "./trees/" directory with the
                    specified name.
    Returns:
        None
    Notes:
        - The function customizes the appearance of the graph by adjusting node
          labels, font size, node shape, and edge styles.
        - The labels of specific operators (e.g., 'or_', 'and_', 'gt') are replaced
          with more readable symbols ('OR', 'AND', '>').
        - The graph layout is generated using the "dot" program from Graphviz.
        - Ensure that the "./trees/" directory exists before calling this function,
          as the image will be saved there.
    Dependencies:
        - PyGraphviz (imported as `pgv`)
        - A utility function `replace_labels` for replacing specific labels in the graph.
        - A utility function `gp.graph` for extracting nodes, edges, and labels from
          the decision tree expression.
    Example:
        >>> plot_tree(expr, name="example_tree")
        This will generate a PNG image of the decision tree and save it as
        "./trees/example_tree.png".
    """

    nodes, edges, labels = gp.graph(expr)
    labels = replace_labels(labels, 'or_','OR')
    labels = replace_labels(labels, 'and_','AND')
    labels = replace_labels(labels, 'gt','>')

    g = pgv.AGraph(strict=False, directed=False)
    g.add_nodes_from(nodes)
    g.add_edges_from(edges)
    g.graph_attr["ranksep"] = "0.1"

    # Improve node and label spacing and change the node shape to "box"
    for i in nodes:
        n = g.get_node(i)
        n.attr["label"] = labels[i]
        n.attr["fontsize"] = "10"  # Adjust font size for better readability
        n.attr["fontname"] = "Arial Bold" 
        n.attr["width"] = "0.5"    # Adjust node width
        n.attr["height"] = "0.05"   # Adjust node height
        n.attr["margin"] = "0.1"   # Add margin to prevent label overlap within nodes
        n.attr["shape"] = "box"    # Set the shape of the node to "box" to encapsulate in a block
        n.attr["style"] = "rounded" # Optional: Use rounded corners for the box
    for e in edges:
        edge = g.get_edge(e[0], e[1])
        edge.attr["arrowhead"] = "none"  # Remove arrows, making it a line
        edge.attr["penwidth"] = "1" 


    g.layout(prog="dot")

    # Save the tree as an image
    g.draw(rf"./trees/{name}.png")